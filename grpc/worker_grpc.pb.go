// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommNodeWorkerClient is the client API for CommNodeWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommNodeWorkerClient interface {
	StartServer(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (CommNodeWorker_StartServerClient, error)
}

type commNodeWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewCommNodeWorkerClient(cc grpc.ClientConnInterface) CommNodeWorkerClient {
	return &commNodeWorkerClient{cc}
}

func (c *commNodeWorkerClient) StartServer(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (CommNodeWorker_StartServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommNodeWorker_ServiceDesc.Streams[0], "/CommNodeWorker/StartServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &commNodeWorkerStartServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommNodeWorker_StartServerClient interface {
	Recv() (*ServerEvent, error)
	grpc.ClientStream
}

type commNodeWorkerStartServerClient struct {
	grpc.ClientStream
}

func (x *commNodeWorkerStartServerClient) Recv() (*ServerEvent, error) {
	m := new(ServerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommNodeWorkerServer is the server API for CommNodeWorker service.
// All implementations must embed UnimplementedCommNodeWorkerServer
// for forward compatibility
type CommNodeWorkerServer interface {
	StartServer(*StartRequest, CommNodeWorker_StartServerServer) error
	mustEmbedUnimplementedCommNodeWorkerServer()
}

// UnimplementedCommNodeWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedCommNodeWorkerServer struct {
}

func (UnimplementedCommNodeWorkerServer) StartServer(*StartRequest, CommNodeWorker_StartServerServer) error {
	return status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedCommNodeWorkerServer) mustEmbedUnimplementedCommNodeWorkerServer() {}

// UnsafeCommNodeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommNodeWorkerServer will
// result in compilation errors.
type UnsafeCommNodeWorkerServer interface {
	mustEmbedUnimplementedCommNodeWorkerServer()
}

func RegisterCommNodeWorkerServer(s grpc.ServiceRegistrar, srv CommNodeWorkerServer) {
	s.RegisterService(&CommNodeWorker_ServiceDesc, srv)
}

func _CommNodeWorker_StartServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommNodeWorkerServer).StartServer(m, &commNodeWorkerStartServerServer{stream})
}

type CommNodeWorker_StartServerServer interface {
	Send(*ServerEvent) error
	grpc.ServerStream
}

type commNodeWorkerStartServerServer struct {
	grpc.ServerStream
}

func (x *commNodeWorkerStartServerServer) Send(m *ServerEvent) error {
	return x.ServerStream.SendMsg(m)
}

// CommNodeWorker_ServiceDesc is the grpc.ServiceDesc for CommNodeWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommNodeWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommNodeWorker",
	HandlerType: (*CommNodeWorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartServer",
			Handler:       _CommNodeWorker_StartServer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/worker.proto",
}
